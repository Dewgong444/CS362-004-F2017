Using the tests I created for assignments three and four I was able to find a number of different bugs in the dominion code I took from Benjamin’s assignment two. First, the refactored cards, all of them, don’t seem to use up any actions when played. By taking just a certain snipped of the cards from the cardEffect() function and creating a new function for them, if you directly call those new functions then those cards don’t use up an action when played. Not only that, but my test for the “village” card also had an incorrect number of actions remaining, so that also seems to not properly use up an action when played. So it seems that action cards, when played, don’t reduce the number of actions the player has remaining. 
	Secondly, Benjamin’s smithy card draws 4 cards rather than 3 when played. This occurs whether you use the cardEffect() function or directly call it with the smithyCard() function. On the bright side, the 4 cards drawn also seem to be drawn from the player’s deck rather than some other source so that part is correct. Finally, the adventurer card doesn’t discard from the hand when played. This occurs whether you call it directly or through cardEffect(). It seems to be an issue with the adventurer code where the card isn’t actually counted as “played”, which makes sense as it never even asks for the hand position of the card itself when it’s called, unlike many other cards. So what seems to happen is the adventurer card takes effect but then the card is never placed in the “played” pile and removed from the hand. We can confirm this by confirming the “played” pile is empty before playing the adventurer card. Also, we can check that the adventurer card is still in the same hand position after we play it. This means that even though the card took effect, it’s never removed for the hand. If a player has enough actions, they could play the adventurer card infinitely. That’s a problem.

